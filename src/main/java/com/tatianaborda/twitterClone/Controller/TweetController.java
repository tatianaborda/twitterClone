package com.tatianaborda.twitterClone.Controller;

import com.tatianaborda.twitterClone.Model.Tweet;
import com.tatianaborda.twitterClone.Model.User;
import com.tatianaborda.twitterClone.Repository.TweetRepository;
import com.tatianaborda.twitterClone.Repository.UserRepository;
import com.tatianaborda.twitterClone.Service.TweetService;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.time.LocalDateTime;
import java.util.List;

@RestController
@RequestMapping("/tweets")
public class TweetController {
    @Autowired
    private TweetRepository tweetRepository;

    @Autowired
    private TweetService tweetService;

    @Autowired
    private UserRepository userRepository;

    @PostMapping("/{userId}")
    public Tweet postTweet(@PathVariable Long userId, @RequestBody Tweet tweet) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new EntityNotFoundException("User not found with id: " + userId));
        tweet.setCreatedBy(user); // identify the tweet creator
        LocalDateTime currentDateTime = LocalDateTime.now(); // Date autogenerated
        tweet.setPostTime(currentDateTime); // postTime assigment
        return tweetRepository.save(tweet); // save tweet on db
    }

    @GetMapping("/user/{userId}")
    public List<Tweet> getTweetsByUserId(@PathVariable Long userId) {
        return tweetService.getTweetsByUserId(userId); // look for tweets posted by the same user
    }

    @DeleteMapping("/{tweetId}")
    public ResponseEntity<String> deleteTweetById(@PathVariable Long tweetId) {
        tweetService.deleteTweetById(tweetId);
        return ResponseEntity.ok("Tweet deleted successfully");
    }

}

